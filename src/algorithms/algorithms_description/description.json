{
    "bfs": {
        "aggregation": {
            "description": "Graph traversal with queue structure",
            "title": "Breadth first search",
            "require_weights": false,
            "require_directed": false,
            "require_non_directed": false,
            "require_tree": false
        },
        "description": {
            "text": "Breadth first search is an algorithm used for traversing graph, by visiting adjacent neighbours and adding them to queue. Next step of algorithm extracts from queue and repeats previous step, as long as queue is not empty.",
            "time": "O(V+E)",
            "space": "O(V)"
        },
        "steps": [
            "Initialize queue Q",
            "Extract node from Q",
            "Add unvisited neighbours to Q",
            "Repeat from 2, if Q is not empty",
            "Q is empty",
            "Terminate"
        ],
        "code": [
            "def bfs(g):",
            "   visited = set({});",
            "   queue = [g.arbitrary_node()];",
            "   while (queue.length > 0):",
            "       node = queue.shift()",
            "       if (!visited.has(node)):",
            "           visited.add(node)",
            "           neighbours = g.get_neighbours(node)",
            "           for (neighbour in neighbours):",
            "               queue.push(neighbour)"
        ]
    },
    "dfs": {
        "aggregation": {
            "description": "Graph traversal with recursive approach",
            "title": "Depth first search",
            "require_weights": false,
            "require_directed": false,
            "require_non_directed": false,
            "require_tree": false
        },
        "steps": [
            "Start",
            "Go to unvisited neighbour",
            "Go back if no visited",
            "Terminate"
        ],
        "description": {
            "text": "Select starting node, add it to stack and visited nodes. Next step of algorithms pops node from stack and adds to stack unvisited neighbours, as long as stack is not empty.",
            "time": "O(V+E)",
            "space": "O(V)"
        },
        "code": [
            "def bfs(g):",
            "   visited = set({});",
            "   queue = [g.arbitrary_node()];",
            "   while (queue.length > 0):",
            "       node = queue.shift()",
            "       if (!visited.has(node)):",
            "           visited.add(node)",
            "           neighbours = g.get_neighbours(node)",
            "           for (neighbour in neighbours):",
            "               queue.push(neighbour)"
        ]
    },
    "connectivity_check": {
        "aggregation": {
            "description": "Check if given undirected graph is connected",
            "title": "Connectivity check",
            "require_weights": false,
            "require_directed": false,
            "require_non_directed": true,
            "require_tree": false
        },
        "steps": [
            "Initialize queue Q",
            "Extract node from Q",
            "Add unvisited neighbours to Q",
            "Repeat 2 step if Q is not empty",
            "Q is empty",
            "Check size of visited set and graph's size",
            "Terminate"
        ],
        "code": [
            "def bfs(g):",
            "   visited = set({});",
            "   queue = [g.arbitrary_node()];",
            "   while (queue.length > 0):",
            "       node = queue.shift()",
            "       if (!visited.has(node)):",
            "           visited.add(node)",
            "           neighbours = g.get_neighbours(node)",
            "           for (neighbour in neighbours):",
            "               queue.push(neighbour)"
        ],
        "description": {
            "text": "Connectivity check performs breadth first search on given graph. Upon visiting all nodes of graph, it checks if number of visited nodes is same as number of graph's nodes. If it's not equal, the graph is not connected.",
            "time": "O(V+E)",
            "space": "O(V)"
        }
    },
    "dijkstra": {
        "aggregation": {
            "description": "Find all shortest paths in weighted graph",
            "title": "Dijkstra's shortest path",
            "require_weights": true,
            "require_directed": false,
            "require_non_directed": false,
            "require_tree": false
        },
        "code": [
            "def bfs(g):",
            "   visited = set({});",
            "   queue = [g.arbitrary_node()];",
            "   while (queue.length > 0):",
            "       node = queue.shift()",
            "       if (!visited.has(node)):",
            "           visited.add(node)",
            "           neighbours = g.get_neighbours(node)",
            "           for (neighbour in neighbours):",
            "               queue.push(neighbour)"
        ],
        "steps": [
            "Select start node",
            "Set distances to all nodes to âˆž",
            "Check distances to neighbours",
            "If one of distances is shorter, update distances",
            "Pick shortest path unvisited neighbour and repeat from 3",
            "Every visited, terminate"
        ],
        "description": {
            "text": "Initialize algorithm by setting distances to all nodes to infinity. First node has distance 0. Find the distance to neighbours of current node, if it's shorter, decrease key in fib",
            "time": "O(E+V\\logV)",
            "space": "O(V)"
        }
    },
    "kruskal": {
        "description": {
            "text": "Initialize algorithm by sorting edges in nondecreasing order and creating disjoint sets from vertices. Pick smallest available edge  and perform find operation between edge's nodes. If they are not in same set, append edge to result and make union between nodes. Select edges from array until all edges have been visited.",
            "time": "O(E\\logE)",
            "space": "O(E + V)"
        },
        "aggregation": {
            "description": "Find spanning tree using sorted edge array and union-find data structure",
            "title": "Kruskal's MST",
            "require_weights": true,
            "require_directed": false,
            "require_non_directed": true,
            "require_tree": false
        },
        "code": [
            "def bfs(g):",
            "   visited = set({});",
            "   queue = [g.arbitrary_node()];",
            "   while (queue.length > 0):",
            "       node = queue.shift()",
            "       if (!visited.has(node)):",
            "           visited.add(node)",
            "           neighbours = g.get_neighbours(node)",
            "           for (neighbour in neighbours):",
            "               queue.push(neighbour)"
        ],
        "steps": [
            "Sort edges in increasing order",
            "Pick smallest edge and add it to disjoint set",
            "If edge creates cycle, repeat 2",
            "Sorted array is empty",
            "Mst found"
        ]
    },
    "kahn": {
        "aggregation": {
            "description": "Sort graph topologically",
            "title": "Kahn's topological sort",
            "require_weights": false,
            "require_directed": true,
            "require_non_directed": false,
            "require_tree": false
        },
        "code": [
            "def bfs(g):",
            "   visited = set({});",
            "   queue = [g.arbitrary_node()];",
            "   while (queue.length > 0):",
            "       node = queue.shift()",
            "       if (!visited.has(node)):",
            "           visited.add(node)",
            "           neighbours = g.get_neighbours(node)",
            "           for (neighbour in neighbours):",
            "               queue.push(neighbour)"
        ],
        "steps": [
            "Initialize indegree values for vertices",
            "Add to queue vertices with indegree == 0",
            "Extract from queue vertice and add to result",
            "Decrement from neighbours their value, if value is 0 add to queue",
            "Queue empty, terminate algorithm"
        ],
        "description": {
            "text": "Algorithm sorts vertices by first initializing indegree values of graph and adding to queue those vertices with indegree equal to zero. It extracts from queue and decreases indegree value of its neighbours, if neighbour has indegree value equal to zero, algorithm adds it to queue.",
            "time": "O(V+E)",
            "space": "O(V)"
        }
    },
    "bipartite": {
        "description": {
            "text": "In bipartite check, we select starting node and color it 0. Upon visiting neighbours, we color them to different color from current node. If any of visited neighbours has the same color, graph is not bipartite. Else we run algorithm until whole graph is colored.",
            "time": "O(V+E)",
            "space": "O(V)"
        },
        "aggregation": {
            "description": "Check if given graph is bipartite",
            "title": "Biparte Graph check",
            "require_weights": false,
            "require_directed": false,
            "require_non_directed": true,
            "require_tree": false
        },
        "steps": [
            "Select start node and color it to blue",
            "Extract node from queue",
            "Visit adjacent nodes",
            "Color adjacent nodes to a color different from current node",
            "Terminate algorithm"
        ],
        "code": [
            "def bfs(g):",
            "   visited = set({});",
            "   queue = [g.arbitrary_node()];",
            "   while (queue.length > 0):",
            "       node = queue.shift()",
            "       if (!visited.has(node)):",
            "           visited.add(node)",
            "           neighbours = g.get_neighbours(node)",
            "           for (neighbour in neighbours):",
            "               queue.push(neighbour)"
        ]
    },
    "tree_path_find": {
        "aggregation": {
            "description": "Find paths in tree using BFS",
            "title": "Tree's shortest paths",
            "require_weights": false,
            "require_directed": false,
            "require_non_directed": true,
            "require_tree": true
        },
        "description": {
            "text": "If we are certain, that graph is a tree, we can find shortest paths to each vertice, using breadth first search. It starts with choosing starting node and assigning to it distance equal to zero.  During visiting node's neighbours, algorithm assigns to them distance, which is sum of edge's weight and current node's distance",
            "time": "O(V+E)",
            "space": "O(V)"
        },
        "code": [
            "def bfs(g):",
            "   visited = set({});",
            "   queue = [g.arbitrary_node()];",
            "   while (queue.length > 0):",
            "       node = queue.shift()",
            "       if (!visited.has(node)):",
            "           visited.add(node)",
            "           neighbours = g.get_neighbours(node)",
            "           for (neighbour in neighbours):",
            "               queue.push(neighbour)"
        ],
        "steps": [
            "Initialize queue Q",
            "Extract node from Q",
            "Add unvisited neighbours to Q",
            "Update distances of neighbours using current vertex distance + neighbour's edge weight",
            "Q is empty",
            "Terminate"
        ]
    },
    "kosaraju": {
        "aggregation": {
            "description": "Finding strongly connected components (SCC) of a directed graph.",
            "title": "Kosaraju's Algorithm",
            "require_weights": false,
            "require_directed": true,
            "require_non_directed": false,
            "require_tree": false
        },
        "code": [
            "def bfs(g):",
            "   visited = set({});",
            "   queue = [g.arbitrary_node()];",
            "   while (queue.length > 0):",
            "       node = queue.shift()",
            "       if (!visited.has(node)):",
            "           visited.add(node)",
            "           neighbours = g.get_neighbours(node)",
            "           for (neighbour in neighbours):",
            "               queue.push(neighbour)"
        ],
        "description": {
            "text": "Kosraju algorithm finds strongly connected components of graph (SCC). It runs two DFS, first ",
            "time": "O(V+E)",
            "space": "O(V+E)"
        },
        "steps": [
            "Start",
            "Go to unvisited neighbour",
            "Exhausted neighbours, add to kosaraju-stack",
            "Go back",
            "Terminate"
        ]
    }
    
}