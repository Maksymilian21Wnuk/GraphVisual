{
    "bfs": {
        "aggregation": {
            "description": "Graph traversal with queue structure",
            "title": "Breadth first search",
            "require_weights": false,
            "require_directed": false,
            "require_non_directed": false,
            "require_tree": false
        },
        "description": {
            "text": "Breadth first search is an algorithm used for traversing graph, by visiting adjacent neighbours and adding them to queue. Next step of algorithm extracts from queue and repeats previous step, as long as queue is not empty.",
            "time": "O(V+E)",
            "space": "O(V)"
        },
        "steps": [
            "Initialize queue Q with starting node",
            "Extract node from Q",
            "Add unvisited neighbours to Q",
            "Repeat from 2, if Q is not empty",
            "Q is empty",
            "Terminate"
        ],
        "code": [
            "def bfs(g, start_node):",
            "    visited = set()",
            "    queue = [start_node]",
            "    while len(queue) != 0 :",
            "        node = queue.pop(0)",
            "        if (node not in visited):",
            "            visited.add(node)",
            "            neighbours = g.get_neighbours(node)",
            "            for nei in neighbours:",
            "                queue.append(nei)"
        ]
    },
    "dfs": {
        "aggregation": {
            "description": "Graph traversal with recursive approach",
            "title": "Depth first search",
            "require_weights": false,
            "require_directed": false,
            "require_non_directed": false,
            "require_tree": false
        },
        "steps": [
            "Begin from starting node",
            "Go to unvisited neighbour",
            "Go back if no unvisited neighbour",
            "Terminate"
        ],
        "description": {
            "text": "Select starting node, add it to stack and visited nodes. Next step of algorithms pops node from stack and adds to stack unvisited neighbours, as long as stack is not empty.",
            "time": "O(V+E)",
            "space": "O(V)"
        },
        "code": [
            "def dfs_recursion(vertice, parent, visited, g):",
            "    if vertice in visited:",
            "        return",
            "    else:",
            "        visited.add(vertice)",
            "        for nei in g.get_neighbours(vertice):",
            "           if (nei != parent):",
            "               dfs_recursion(nei, vertice, visited, g)",
            "",
            "def dfs(g, start_node):",
            "\tvisited = set()",
            "\tdfs_recursion(start_node, -1, visited, g)"
        ]
    },
    "connectivity_check": {
        "aggregation": {
            "description": "Check if given undirected graph is connected",
            "title": "Connectivity check",
            "require_weights": false,
            "require_directed": false,
            "require_non_directed": true,
            "require_tree": false
        },
        "steps": [
            "Initialize queue Q",
            "Extract node from Q",
            "Add unvisited neighbours to Q",
            "Repeat 2 step if Q is not empty",
            "Q is empty",
            "Check size of visited set and graph's size",
            "Terminate"
        ],
        "code": [
            "def connectivity_check(g):",
            "    visited = set()",
            "    queue = [g.arbitrary_node()]",
            "    while len(queue) != 0 :",
            "        node = queue.pop(0)",
            "        if (node not in visited):",
            "            visited.add(node)",
            "            neighbours = g.get_neighbours(node)",
            "            for nei in neighbours:",
            "                queue.append(nei)",
            "    if len(visited) != g.size():",
            "        return False",
            "    else:",
            "        return True"
        ],
        "description": {
            "text": "Connectivity check performs breadth first search on given graph. Upon visiting all nodes of graph, it checks if number of visited nodes is same as number of graph's nodes. If it's not equal, the graph is not connected.",
            "time": "O(V+E)",
            "space": "O(V)"
        }
    },
    "dijkstra": {
        "aggregation": {
            "description": "Find all shortest paths in weighted graph",
            "title": "Dijkstra's shortest path",
            "require_weights": true,
            "require_directed": false,
            "require_non_directed": false,
            "require_tree": false
        },
        "code": [
            "# heap implementation, runs in O((E+V)logV)",
            "def dijkstra(g : WeightedGraph, start_node : str | int):",
            "    heap = Heap((0, start_node))",
            "    ",
            "    distances = {node : float('inf') for node in g.get_nodes()}",
            "    distances[start_node] = 0",
            "    ",
            "    visited = set()",
            "    while len(heap) != 0:",
            "        current_distance, node = heap.pop()",
            "        if node in visited:",
            "            continue",
            "        for nei in g.get_neighbours(node):",
            "            new_dist = g.get_weight(node, nei) + current_distance",
            "            old_dist = distances[nei]",
            "            ",
            "            if new_dist < old_dist:",
            "                print(new_dist)",
            "                distances[nei] = new_dist",
            "                heap.push((new_dist, nei))",
            "                ",
            "    return distances"
        ],
        "steps": [
            "Select start node",
            "Set distances to all nodes to âˆž",
            "Check distances to neighbours",
            "If one of distances is shorter, update distances",
            "Pick shortest path unvisited neighbour and repeat from 3",
            "Every visited, terminate"
        ],
        "description": {
            "text": "Initialize algorithm by setting distances to all nodes to infinity. First node has distance 0. Find the distance to neighbours of current node, if it's shorter, decrease key in fib",
            "time": "O(E+VlogV)",
            "space": "O(V)"
        }
    },
    "kruskal": {
        "description": {
            "text": "Initialize algorithm by sorting edges in nondecreasing order and creating disjoint sets from vertices. Pick smallest available edge  and perform find operation between edge's nodes. If they are not in same set, append edge to result and make union between nodes. Select edges from array until all edges have been visited.",
            "time": "O(ElogE)",
            "space": "O(E + V)"
        },
        "aggregation": {
            "description": "Find spanning tree using sorted edge array and union-find data structure",
            "title": "Kruskal's MST",
            "require_weights": true,
            "require_directed": false,
            "require_non_directed": true,
            "require_tree": false
        },
        "code": [
            "def kruskal(g : WeightedGraph):",
            "    edges = g.get_edges()",
            "    # sort by edge's weight",
            "    edges = deque(sorted(edges, key=lambda e : e.weight))",
            "    disjoint_set = DisjointSet(g.get_nodes())",
            "    result = []",
            "    while len(edges) != 0 :",
            "        edge = edges.popleft()",
            "        # find operation, if not in same set ",
            "        # add to set and to result",
            "        if not disjoint_set.connected(edge.source, edge.dest):",
            "            disjoint_set.merge(edge.source, edge.dest)",
            "            result.append(edge)",
            "            ",
            "    return result"
        ],
        "steps": [
            "Sort edges in increasing order",
            "Pick smallest edge and add it to disjoint set",
            "If edge creates cycle, repeat 2",
            "Sorted array is empty",
            "Mst found"
        ]
    },
    "kahn": {
        "aggregation": {
            "description": "Sort graph topologically",
            "title": "Kahn's topological sort",
            "require_weights": false,
            "require_directed": true,
            "require_non_directed": false,
            "require_tree": false
        },
        "code": [
            "def kahn(g):",
            "    indegrees = {}",
            "    for node in g.get_nodes():",
            "        indegrees[node] = 0",
            "    ",
            "    for node in g.get_nodes():",
            "        for neighbour in g.get_neighbours(node):",
            "            indegrees[neighbour] += 1",
            "    queue = []",
            "",
            "    for node in indegrees:",
            "        if indegrees[node] == 0 :",
            "            queue.append(node)",
            "    result = []    ",
            "    while len(queue) != 0 :",
            "        node = queue.pop(0)",
            "        result.append(node)",
            "        for neighbour in g.get_neighbours(node):",
            "            indegrees[neighbour] -= 1",
            "            if indegrees[neighbour] == 0:",
            "                queue.append(neighbour)",
            "    ",
            "    if len(result) != g.size():",
            "        print(\"Graph has no topological ordering\")",
            "        return []",
            "    ",
            "    return result"
        ],
        "steps": [
            "Initialize indegree values for vertices",
            "Add to queue vertices with indegree == 0",
            "Extract from queue vertice and add to result",
            "Decrement from neighbours their value, if value is 0 add to queue",
            "Queue empty, terminate algorithm"
        ],
        "description": {
            "text": "Algorithm sorts vertices by first initializing indegree values of graph and adding to queue those vertices with indegree equal to zero. It extracts from queue and decreases indegree value of its neighbours, if neighbour has indegree value equal to zero, algorithm adds it to queue.",
            "time": "O(V+E)",
            "space": "O(V)"
        }
    },
    "bipartite": {
        "description": {
            "text": "In bipartite check, we select starting node and color it 0. Upon visiting neighbours, we color them to different color from current node. If any of visited neighbours has the same color, graph is not bipartite. Else we run algorithm until whole graph is colored.",
            "time": "O(V+E)",
            "space": "O(V)"
        },
        "aggregation": {
            "description": "Check if given graph is bipartite",
            "title": "Biparte Graph check",
            "require_weights": false,
            "require_directed": false,
            "require_non_directed": true,
            "require_tree": false
        },
        "steps": [
            "Start from unvisited node and color it blue",
            "Extract node from queue",
            "Visit adjacent nodes",
            "Color adjacent nodes to a color different from current node",
            "If there are still unvisited, repeat from 1, as there is another component to check.",
            "Terminate algorithm"
        ],
        "code": [
            "def bipartite_check(g):",
            "    BLUE = 0",
            "    RED = 1",
            "    NOT_COLORED = -1",
            "    ",
            "    colors = {}",
            "    for node in g.get_nodes():",
            "        colors[node] = NOT_COLORED",
            "    ",
            "    for start_node in g.get_nodes():",
            "        if (colors[start_node] == NOT_COLORED):",
            "            queue = [start_node]",
            "            colors[start_node] = BLUE",
            "            ",
            "            while len(queue) != 0 : # check bipartitness of component",
            "                node = queue.pop(0)",
            "                for nei in g.get_neighbours(node):",
            "                    if (colors[nei] == NOT_COLORED):",
            "                        colors[nei] = BLUE if colors[node] == RED else RED",
            "                        queue.append(nei)",
            "                    else:",
            "                        if colors[nei] == colors[node]:",
            "                            return False",
            "    return True"
        ]
    },
    "tree_path_find": {
        "aggregation": {
            "description": "Find paths in tree using BFS",
            "title": "Tree's shortest paths",
            "require_weights": false,
            "require_directed": false,
            "require_non_directed": true,
            "require_tree": true
        },
        "description": {
            "text": "If we are certain, that graph is a tree, we can find shortest paths to each vertice, using breadth first search. It starts with choosing starting node and assigning to it distance equal to zero.  During visiting node's neighbours, algorithm assigns to them distance, which is sum of edge's weight and current node's distance",
            "time": "O(V+E)",
            "space": "O(V)"
        },
        "code": [
            "def tree_path(g):",
            "    if not g.is_tree():",
            "        print(\"Not a tree\")",
            "        return {}",
            "    ",
            "    start = g.arbitrary_node()",
            "    distances = {start: 0}",
            "    visited = set()",
            "    queue = [start]",
            "    ",
            "    ",
            "    while len(queue) != 0 :",
            "        node = queue.pop(0)",
            "        visited.add(node)",
            "        ",
            "        for nei in g.get_neighbours(node):",
            "            if nei not in visited:",
            "                distances[nei] = distances[node] + g.get_weight(node, nei)",
            "                queue.append(nei)",
            "    return distances"
        ],
        "steps": [
            "Initialize queue Q",
            "Extract node from Q",
            "Add unvisited neighbours to Q",
            "Update distances of neighbours using current vertex distance + neighbour's edge weight",
            "Q is empty",
            "Terminate"
        ]
    },
    "kosaraju": {
        "aggregation": {
            "description": "Finding strongly connected components (SCC) of a directed graph.",
            "title": "Kosaraju's Algorithm",
            "require_weights": false,
            "require_directed": true,
            "require_non_directed": false,
            "require_tree": false
        },
        "code": [
            "def kosaraju_dfs(g : Graph, node, visited : set, stack : list[int | str]):",
            "    if node in visited:",
            "        return",
            "    else:",
            "        visited.add(node)",
            "        for nei in g.get_neighbours(node):",
            "            kosaraju_dfs(g, nei, visited, stack)",
            "        stack.append(node)",
            "        ",
            "def kosaraju(g : Graph):",
            "    stack = []",
            "    visited = set()",
            "    ",
            "    for node in g.get_nodes():",
            "        kosaraju_dfs(g, node, visited, stack)",
            "    ",
            "    g.transpose()",
            "    result = []",
            "    visited = set()",
            "    while len(stack) != 0 :",
            "        node = stack.pop()",
            "        if node not in visited:",
            "            comp = []",
            "            kosaraju_dfs(g, node, visited, comp)",
            "            result.append(comp)",
            "    return result"
        ],
        "description": {
            "text": "Kosraju algorithm finds strongly connected components of graph (SCC). It runs two DFS, first runs dfs on unvisited nodes and upon going back in recursion from node, it adds it to stack. The second part run begins with transposing graph. Then it runs dfs on popping the nodes from previously retrieved stack. Sequentially runs dfs and each dfs denotes each component.",
            "time": "O(V+E)",
            "space": "O(V+E)"
        },
        "steps": [
            "Start dfs from unvisited node",
            "Go to unvisited",
            "Upon going back, add to kosaraju-stack",
            "Start dfs, this time on transposed graph",
            "Pop from stack, if not visited, run dfs",
            "Add to component",
            "Go back",
            "Terminate"
        ]
    }
}